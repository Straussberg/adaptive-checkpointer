{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Adaptive Checkpointer: Sublinear State Saving for Simulations","text":"<p>Practical implementation of \u221aT-based checkpointing for distributed simulations</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Sublinear Memory: O(\u221aT) storage complexity</li> <li>Adaptive Checkpointing: Dynamic interval adjustment</li> <li>Tiered Storage: RAM \u2192 Disk \u2192 S3</li> <li>Rollback Optimization: Average O(\u221aT) recovery time</li> <li>Distributed Ready: Thread-safe and cloud-enabled</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":"<p>```python from adaptive_checkpointer import AdaptiveCheckpointer, TieredBackend</p>"},{"location":"#configure-storage-hierarchy","title":"Configure storage hierarchy","text":"<p>storage = TieredBackend() storage.add_ram_layer(10_000)           # First 10k events in RAM storage.add_disk_layer(100_000, \"ckpt/\") # Next 90k on disk storage.add_s3_layer(\"simulation-bucket\") # Rest on cloud</p>"},{"location":"#initialize-checkpointer","title":"Initialize checkpointer","text":"<p>checkpointer = AdaptiveCheckpointer(     base_interval=500,     storage=storage )</p>"},{"location":"#simulation-loop","title":"Simulation loop","text":"<p>state = {\"counter\": 0} for event_id in range(1, 100_001):     # Update state     state[\"counter\"] += event_id</p> <pre><code># Checkpoint decision\nif checkpointer.should_checkpoint(event_id):\n    checkpointer.save_checkpoint(event_id, state)\n\n# Handle rollbacks (1% probability)\nif random.random() &lt; 0.01:\n    target = max(0, event_id - random.randint(10, 100))\n    _, state = checkpointer.get_last_checkpoint(target)\n</code></pre>"}]}